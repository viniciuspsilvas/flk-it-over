"use client";
import { Applicant, ApplicantForm } from "@/components/forms/applicant-form";
import Card from "@/components/global/card";
import { ConfirmationDialog } from "@/components/global/confirmation-dialog";
import { NoDataFound } from "@/components/global/no-data-found";
import { motion } from "framer-motion";
import { useState } from "react";
import { MdOutlineDeleteForever } from "react-icons/md";

const itemVariant = {
  hidden: {
    y: "-50vw",
    opacity: 0,
    scale: 0.5
  },

  show: {
    transition: { ease: "easeInOut", duration: 0.5 },
    opacity: 1,
    scale: 1,
    y: 0
  }
};

export default function Home() {
  const [list, setList] = useState<Applicant[]>([]);

  const [isConfirmDeleteApplicantOpened, setIsConfirmDeleteApplicantOpened] =
    useState(false);
  const [selectedDeleteApplicant, setSelectedDeleteApplicant] =
    useState<Applicant | null>(null);

  // Function to handle form submission and add a new applicant to the list
  const handleFormSubmit = (data: Applicant) => {
    // If setting as primary, reset isPrimary for all applicants in the list
    const updatedList = !!data.isPrimary
      ? list.map((item) => ({ ...item, isPrimary: false }))
      : list;

    // In the real scenario, the id will be generated by the backend
    const id = new Date().getTime().toString() + Math.random().toString();

    // Add the new applicant to the list with the correct isPrimary value
    setList([...updatedList, { ...data, id, isPrimary: true }]);
  };

  const openConfirmDeleteApplicant = (item: Applicant) => {
    setSelectedDeleteApplicant(item as Applicant);
    setIsConfirmDeleteApplicantOpened(true);
  };

  const closeConfirmDeleteApplicant = () => {
    setSelectedDeleteApplicant(null);
    setIsConfirmDeleteApplicantOpened(false);
  };

  const handleConfirmDeleteApplicant = () => {
    if (selectedDeleteApplicant) {
      // If the deleted applicant is primary, set the first item as primary
      const updatedList = list.filter(
        (item) => item.id !== selectedDeleteApplicant.id
      );
      if (selectedDeleteApplicant.isPrimary && updatedList.length > 0) {
        updatedList[0].isPrimary = true;
      }

      // Update the list
      setList(updatedList);
    }
    closeConfirmDeleteApplicant();
  };

  const handlePrimaryChange = (id: string, isChecked: boolean) => {
    console.log("handlePrimaryChange", id, isChecked);

    // Update the primary status of the clicked item and reset others
    const updatedList = list.map((item) => ({
      ...item,
      isPrimary: item.id === id ? isChecked : false
    }));

    setList(updatedList);
  };

  // Amount of applicants
  const amount = list.length;

  return (
    <>
      <div className="container mx-auto max-w-screen-md p-4">
        <h1 className="text-2xl font-bold mb-4">Applicant Form</h1>

        {/* Pass the handleFormSubmit function as the onSubmit prop */}
        <ApplicantForm onSubmit={handleFormSubmit} />

        {/* Display the list of applicants */}
        {amount > 0 ? (
          <>
            {list.map((item: Applicant) => (
              <motion.div
                key={item.id}
                variants={itemVariant}
                initial="hidden"
                animate="show"
              >
                <Card
                  onPrimaryChange={
                    amount === 1 ? undefined : handlePrimaryChange
                  }
                  className="mb-2"
                  avatar={`https://ui-avatars.com/api/?background=random&name=${item.firstName}+${item.lastName}`}
                  id={item.id}
                  title={`${item.firstName} ${item.lastName}`}
                  content={item.email}
                  checked={!!item.isPrimary}
                  menuOptions={
                    amount === 1
                      ? undefined // If there is only one item, don't show the menu
                      : [
                          {
                            label: "Delete",
                            onClick: () => openConfirmDeleteApplicant(item),
                            startIcon: <MdOutlineDeleteForever size={15} />
                          }
                        ]
                  }
                />
              </motion.div>
            ))}
          </>
        ) : (
          <NoDataFound />
        )}
      </div>
      <ConfirmationDialog
        open={isConfirmDeleteApplicantOpened}
        onClose={closeConfirmDeleteApplicant}
        onConfirm={handleConfirmDeleteApplicant}
      />
    </>
  );
}
